# vim: set ft=python:
r"""Usage: prog

"""
$ prog
{}

$ prog --xxx
"user-error"


r"""Usage: prog [options]

Options: -a  All.

"""
$ prog
{"-a": false}

$ prog -a
{"-a": true}

$ prog -x
"user-error"


r"""Usage: prog [options]

Options: --all  All.

"""
$ prog
{"--all": false}

$ prog --all
{"--all": true}

$ prog --xxx
"user-error"


r"""Usage: prog [options]

Options: -v, --verbose  Verbose.

"""
$ prog --verbose
{"--verbose": true, "-v": true}

$ prog -v
{"--verbose": true, "-v": true}


r"""Usage: prog [options]

Options: -p PATH

"""
$ prog -p home/
{"-p": "home/"}

$ prog -phome/
{"-p": "home/"}

$ prog -p
"user-error"


r"""Usage: prog [options]

Options: --path <path>

"""
$ prog --path home/
{"--path": "home/"}

$ prog --path=home/
{"--path": "home/"}

$ prog --path
"user-error"


r"""Usage: prog [options]

Options: -p PATH, --path=<path>  Path to files.

"""
$ prog -proot
{"--path": "root", "-p": "root"}


r"""Usage: prog [options]

Options:    -p --path PATH  Path to files.

"""
$ prog -p root
{"--path": "root", "-p": "root"}

$ prog --path root
{"--path": "root", "-p": "root"}


r"""Usage: prog [options]

Options:
 -p PATH  Path to files [default: ./]

"""
$ prog
{"-p": "./"}

$ prog -phome
{"-p": "home"}


r"""UsAgE: prog [options]

OpTiOnS: --path=<files>  Path to files
                [dEfAuLt: /root]

"""
$ prog
{"--path": "/root"}

$ prog --path=home
{"--path": "home"}


r"""usage: prog [options]

options:
    -a        Add
    -r        Remote
    -m <msg>  Message

"""
$ prog -a -r -m Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -armyourass
{"-a": true,
 "-m": "yourass",
 "-r": true}

$ prog -a -r
{"-a": true,
 "-r": true}


r"""Usage: prog [options]

Options: --version
         --verbose

"""
$ prog --version
{"--verbose": false,
 "--version": true}

$ prog --verbose
{"--verbose": true,
 "--version": false}


r"""usage: prog [-a -r -m <msg>]

options:
 -a        Add
 -r        Remote
 -m <msg>  Message

"""
$ prog -armyourass
{"-a": true,
 "-m": "yourass",
 "-r": true}


r"""usage: prog [-armmsg]

options: -a        Add
         -r        Remote
         -m <msg>  Message

"""
$ prog -a -r -m Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -ar -m Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -arm Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -armHello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -arm=Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -m=Hello
{"-a": false,
 "-m": "Hello",
 "-r": false}

$ prog -m Hello
{"-a": false,
 "-m": "Hello",
 "-r": false}

$ prog -mHello
{"-a": false,
 "-m": "Hello",
 "-r": false}

$ prog -m
"user-error"

r"""usage: prog [-arm=msg]

options: -a        Add
         -r        Remote
         -m <msg>  Message

"""
$ prog -a -r -m Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -ar -m Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -arm Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -armHello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -arm=Hello
{"-a": true,
 "-m": "Hello",
 "-r": true}

$ prog -m=Hello
{"-a": false,
 "-m": "Hello",
 "-r": false}

$ prog -m Hello
{"-a": false,
 "-m": "Hello",
 "-r": false}

$ prog -mHello
{"-a": false,
 "-m": "Hello",
 "-r": false}

$ prog -m
"user-error"

r"""usage: prog -a -b

options:
 -a
 -b

"""
$ prog -a -b
{"-a": true, "-b": true}

$ prog -b -a
{"-a": true, "-b": true}

$ prog -ab
{"-a": true, "-b": true}

$ prog -ba
{"-a": true, "-b": true}

$ prog -a
{"-a": true, "-b": false}

$ prog
{"-a": false, "-b": false}


r"""usage: prog (-a -b)

options: -a
         -b

"""
$ prog -a -b
{"-a": true, "-b": true}

$ prog -b -a
{"-a": true, "-b": true}

$ prog -ab
{"-a": true, "-b": true}

$ prog -ba
{"-a": true, "-b": true}

$ prog -a
{"-a": true, "-b": false}

$ prog
{"-a": false, "-b": false}


r"""usage: prog [-a] -b

options: -a
 -b

"""
$ prog -a -b
{"-a": true, "-b": true}

$ prog -b -a
{"-a": true, "-b": true}

$ prog -a
{"-a": true, "-b": false}

$ prog -b
{"-a": false, "-b": true}

$ prog
{"-a": false, "-b": false}


r"""usage: prog [(-a -b)]

options: -a
         -b

"""
$ prog -a -b
{"-a": true, "-b": true}

$ prog -b -a
{"-a": true, "-b": true}

$ prog -ab
{"-a": true, "-b": true}

$ prog -ba
{"-a": true, "-b": true}

$ prog -a
{"-a": true, "-b": false}

$ prog -b
{"-a": false, "-b": true}

$ prog
{"-a": false, "-b": false}


#
# Mutually excluse groups
#

r"""usage: prog (-a|-b)"""
$ prog -a -b
"user-error"

$ prog
{"-a": false, "-b": false}

$ prog -a
{"-a": true, "-b": false}

$ prog -b
{"-a": false, "-b": true}


r"""usage: prog [ -a | -b ]

options: -a
         -b

"""
$ prog -a -b
"user-error"

$ prog
{"-a": false, "-b": false}

$ prog -a
{"-a": true, "-b": false}

$ prog -b
{"-a": false, "-b": true}


r"""usage: prog <arg>"""
$ prog 10
{"<arg>": 10,
 "ARG": 10}

$ prog 10 20
"user-error"

$ prog
"user-error"


r"""usage: prog [<arg>]"""
$ prog 10
{"<arg>": 10,
 "ARG": 10}

$ prog 10 20
"user-error"

$ prog
{}


r"""usage: prog <kind> <name> <type>"""
$ prog 10 20 40
{"<kind>": 10, "<name>": 20, "<type>": 40,
 "KIND": 10, "NAME": 20, "TYPE": 40}

$ prog 10 20
"user-error"

$ prog
"user-error"


r"""usage: prog <kind> [<name> <type>]"""
$ prog 10 20 40
{"<kind>": 10, "<name>": 20, "<type>": 40,
 "KIND": 10, "NAME": 20, "TYPE": 40}

$ prog 10 20
# Original: {"<kind>": 10, "<name>": 20}
"user-error"

$ prog
"user-error"


r"""usage: prog [<kind> | <name> <type>]"""
$ prog 10 20 40
"user-error"

$ prog 20 40
{"<name>": 20, "<type>": 40,
 "NAME": 20, "TYPE": 40}

$ prog
{}


r"""usage: prog (<kind> --all | <name>)

options:
 --all

"""
$ prog 10 --all
{"--all": true, "<kind>": 10,
 "KIND": 10}

$ prog 10
{"--all": false, "<name>": 10, "NAME": 10}

$ prog
"user-error"


r"""usage: prog [<name> <name>]"""
$ prog 10 20
{"<name>": [10, 20], "NAME": [10, 20]}

# Note: This is a deviation. The spec above says that
#       it wants exactly *two* occurences of `<name>`.
#       hence we shall give it that and if not -error.
#       See the added test below for how to do it in
#       this implementation.
# Original:
# {"<name>": [10], "NAME": [10]}
$ prog 10
"user-error"

$ prog
{"<name>": [], "NAME": []}

# Added test case:
# (See note above)
r"""usage: prog [<name> [<name>]]"""
$ prog 10 20
{"<name>": [10, 20], "NAME": [10, 20]}

$ prog 10
{"<name>": [10], "NAME": [10]}

$ prog
{"<name>": [], "NAME": []}


r"""usage: prog [(<name> <name>)]"""
$ prog 10 20
{"<name>": [10, 20], "NAME": [10, 20]}

$ prog 10
"user-error"

$ prog
{"<name>": [], "NAME": []}

r"""usage: prog NAME..."""
$ prog 10 20
{"<name>": [10, 20],
 "NAME": [10, 20]}

$ prog 10
{"<name>": [10],
 "NAME": [10]}

$ prog
"user-error"

r"""usage: prog [NAME]..."""
$ prog 10 20
{"<name>": [10, 20], "NAME": [10, 20]}

$ prog 10
{"<name>": [10], "NAME": [10]}

$ prog
{"<name>": [], "NAME": []}


r"""usage: prog [NAME...]"""
$ prog 10 20
{"<name>": [10, 20], "NAME": [10, 20]}

$ prog 10
{"<name>": [10], "NAME": [10]}

$ prog
{"<name>": [], "NAME": []}


r"""usage: prog [NAME [NAME ...]]"""
$ prog 10 20
{"<name>": [10, 20], "NAME": [10, 20]}

$ prog 10
{"<name>": [10], "NAME": [10]}

$ prog
{"<name>": [], "NAME": []}


r"""usage: prog (NAME | --foo NAME)

options: --foo

"""
$ prog 10
{"--foo": false, "<name>": 10, "NAME": 10}

$ prog --foo 10
{"--foo": true, "<name>": 10, "NAME": 10}

$ prog --foo=10
"user-error"

r"""usage: prog (NAME | --foo) [--bar | NAME]

options: --foo
options: --bar

"""
$ prog 10
{"--bar": false, "--foo": false, "<name>": [10], "NAME": [10]}

$ prog 10 20
{"--bar": false, "--foo": false, "<name>": [10, 20], "NAME": [10, 20]}

$ prog --foo --bar
{"--bar": true, "--foo": true, "<name>": [], "NAME": []}


r"""Naval Fate.

Usage:
  prog ship new <name>...
  prog ship [<name>] move <x> <y> [--speed=<kn>]
  prog ship shoot <x> <y>
  prog mine (set|remove) <x> <y> [--moored|--drifting]
  prog -h | --help
  prog --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --speed=<kn>  Speed in knots [default: 10].
  --moored      Mored (anchored) mine.
  --drifting    Drifting mine.

"""

# XXX: We are deviating here. See `Language.Docopt.Trans.reduce` for a full
#      explanation of the issue. In brief, this implementation, collects values
#      only for arguments of the branch that was actually matched.
#      Secondly, `<name>` does not evaluate to an array. I don't see why it
#      would in the original implementation either? What's the rationale here?
#
# Original:
#
# {"--drifting": false,
#  "--help": false,
#  "--moored": false,
#  "--speed": 20,
#  "--version": false,
#  "<name>": ["Guardian"],
#  "<x>": 150,
#  "<y>": 300,
#  "mine": false,
#  "move": true,
#  "new": false,
#  "remove": false,
#  "set": false,
#  "ship": true,
#  "shoot": false}

$ prog ship Guardian move 150 300 --speed=20
{"--speed": 20,
 "<name>": "Guardian",
 "<x>": 150,
 "<y>": 300,
 "NAME": "Guardian",
 "X": 150,
 "Y": 300,
 "move": true,
 "ship": true}


r"""usage: prog --hello"""
$ prog --hello
{"--hello": true}


r"""usage: prog [--hello=<world>]"""
$ prog
{}

$ prog --hello wrld
{"--hello": "wrld"}


r"""usage: prog [-o]"""
$ prog
{"-o": false}

$ prog -o
{"-o": true}


r"""usage: prog [-opr]"""
$ prog -op
{"-o": true, "-p": true, "-r": false}


r"""usage: prog --aabb | --aa"""
# Original:
# {"--aabb": false, "--aa": true}
$ prog --aa
{"--aa": true}

# Note: This is kept, but fails for other reasons
#       than being a unique prefix: The option
#       simply is not part of the specification.
$ prog --a
"user-error"  # not a unique prefix

#
# Counting number of flags
#

r"""Usage: prog -v"""
$ prog -v
{"-v": true}


r"""Usage: prog [-v -v]"""
$ prog
{"-v": 0}

$ prog -v
{"-v": 1}

$ prog -vv
{"-v": 2}


r"""Usage: prog -v ..."""
# Note: Deviation: We allow not passing flags.
# Original "user-error"
$ prog
{"-v": 0}

$ prog -v
{"-v": 1}

$ prog -vv
{"-v": 2}

$ prog -vvvvvv
{"-v": 6}


r"""Usage: prog [-v | -vv | -vvv]

This one is probably most readable user-friednly variant.

"""
$ prog
{"-v": 0}

$ prog -v
{"-v": 1}

$ prog -vv
{"-v": 2}

$ prog -vvvv
"user-error"


r"""usage: prog [--ver --ver]"""
$ prog --ver --ver
{"--ver": 2}

#
# Counting commands
#

r"""usage: prog [go]"""
$ prog go
{"go": true}


# Note: Deviation: [go go] means both `go` are required!
# Original:
# r"""usage: prog [go go]"""
r"""usage: prog [go [go]]"""
$ prog
{"go": 0}

$ prog go
{"go": 1}

$ prog go go
{"go": 2}

$ prog go go go
"user-error"

r"""usage: prog go..."""
$ prog go go go go go
{"go": 5}


# [options] does not include options from usage-pattern
#
# XXX: These tests do not pass yet. Not sure how to resolve.
#
# TODO: Make this pass
#
# r"""usage: prog [options] [-a]
#
# options: -a
#          -b
# """
# $ prog -a
# {"-a": true, "-b": false}
#
# $ prog -aa
# "user-error"
# 
#
# Test [options] shourtcut
#
#
r"""Usage: prog [options] A
Options:
    -q  Be quiet
    -v  Be verbose.

"""
$ prog arg
{"-q": false, "-v": false, "<a>": "arg", "A": "arg"}

$ prog -v arg
{"-q": false, "-v": true, "<a>": "arg", "A": "arg"}

$ prog -q arg
{"-q": true, "-v": false, "<a>": "arg", "A": "arg"}

#
# Test single dash
#

r"""usage: prog [-]"""

$ prog -
{"-": true}

$ prog
{"-": false}

#
# If argument is repeated, its value should always be a list
#

r"""usage: prog [NAME [NAME ...]]"""

$ prog a b
{"<name>": ["a", "b"], "NAME": ["a", "b"]}

$ prog
{"<name>": [], "NAME": []}

#
# Option's argument defaults to null/None
#
# Note: Deviation: Currently, these values are omitted entirely.
#       XXX: ...this could be revisited
#

r"""usage: prog [options]
options:
 -a        Add
 -m <msg>  Message

"""
$ prog -a
{"-a": true}

#
# Test options without description
#

r"""usage: prog --hello"""
$ prog --hello
{"--hello": true}

r"""usage: prog [--hello=<world>]"""
# Original { "--hello": null }
$ prog
{}

$ prog --hello wrld
{"--hello": "wrld"}

r"""usage: prog [-o]"""
$ prog
{"-o": false}

$ prog -o
{"-o": true}

r"""usage: prog [-opr]"""
$ prog -op
{"-o": true, "-p": true, "-r": false}

r"""usage: git [-v | --verbose]"""
$ prog -v
{"--verbose": false, "-v": true}

r"""usage: git remote [-v | --verbose]"""
$ prog remote -v
{"--verbose": false, "-v": true, "remote": true}

#
# Test empty usage pattern
#

r"""
usage: prog
"""
$ prog
{}

r"""
usage: prog
       prog <a> <b>
"""
$ prog 1 2
{"<a>": 1, "<b>": 2, "A": 1, "B": 2}

# Original: {"<a>": null, "<b>": null}
$ prog
{}

r"""
usage: prog <a> <b>
       prog
"""
# Original: {"<a>": null, "<b>": null}
$ prog
{}

#
# Option's argument should not capture default value from usage pattern
#

r"""usage: prog [--file=<f>]"""
$ prog
{}

r"""usage: prog [--file=<f>]

options: --file <a>

"""
$ prog
{}

r"""
Usage: prog [-a <host:port>]

Options: -a, --address <host:port>  TCP address [default: localhost:6283].

"""

# Note: This implementation will also complete the alias.
# Original: {"--address": "localhost:6283"}
$ prog
{"--address": "localhost:6283",
 "-a": "localhost:6283"}

#
# If option with argument could be repeated,
# its arguments should be accumulated into a list
#

r"""usage: prog --long=<arg> ..."""

$ prog --long one
{"--long": ["one"]}

$ prog --long one --long two
{"--long": ["one", "two"]}


#
# Test multiple elements repeated at once
#

r"""usage: prog (go <direction> --speed=<km/h>)..."""

$ prog  go left --speed=5  go right --speed=9
{"--speed": [5, 9],
 "<direction>": ["left", "right"],
 "DIRECTION": ["left", "right"],
 "go": 2}


# Required options should work with option shortcut
#
# XXX: This test currently fails and requires further
#      consideration. Should the option descriptions
#      merge with the input? Currently they simply
#      expand in-place during solving, causing `-a -a`
#      to expand into an array.
#
# TODO: Make this pass
# r"""usage: prog [options] -a
# 
# options: -a
# 
# """
# $ prog -a
# {"-a": true}
#
#
# If option could be repeated its defaults should be split into a list
#

r"""usage: prog [-o <o>]...

options: -o <o>  [default: x]

"""
$ prog -o this -o that
{"-o": ["this", "that"]}

$ prog
{"-o": ["x"]}

r"""usage: prog [-o <o>]...

options: -o <o>  [default: x y]

"""
$ prog -o this
{"-o": ["this"]}

$ prog
{"-o": ["x", "y"]}

# Note: Added to test defaults escaping
r"""usage: prog [-o <o>]...

options: -o <o>  [default: "x y"]

"""
$ prog -o this
{"-o": ["this"]}

$ prog
{"-o": ["x y"]}

#
# Test stacked option's argument
#

r"""usage: prog -pPATH

options: -p PATH

"""
$ prog -pHOME
{"-p": "HOME"}

#
# Issue 56: Repeated mutually exclusive args give nested lists sometimes
#

r"""Usage: foo (--xx=x|--yy=y)..."""
$ prog --xx=1 --yy=2
{"--xx": [1], "--yy": [2]}

#
# POSIXly correct tokenization
#

r"""usage: prog [<input file>]"""
$ prog f.txt
{"<input file>": "f.txt",
 "INPUT FILE": "f.txt"} # XXX: Granted, this is awkward

r"""usage: prog [--input=<file name>]..."""
$ prog --input a.txt --input=b.txt
{"--input": ["a.txt", "b.txt"]}

#
# Issue 85: `[options]` shourtcut with multiple subcommands
#
# Note: The initial line is put onto a newline in order
#       for the second line to line up (otherwise the
#       leading 'r"""' skew the results), since the usage
#       parser is indent-based.
r"""
usage: prog good [options]
       prog fail [options]

options: --loglevel=N

"""
# Original:
# {"--loglevel": 5, "fail": true, "good": false}
$ prog fail --loglevel 5
{"--loglevel": 5, "fail": true}

#
# Usage-section syntax
#

r"""usage:prog --foo"""
$ prog --foo
{"--foo": true}

r"""PROGRAM USAGE: prog --foo"""
$ prog --foo
{"--foo": true}


# Note: The initial line is put onto a newline in order
#       for the second line to line up (otherwise the
#       leading 'r"""' skew the results), since the usage
#       parser is indent-based.
r"""
Usage: prog --foo
       prog --bar
NOT PART OF SECTION"""
$ prog --foo
{"--foo": true}

$ prog --bar
{"--bar": true}

r"""Usage:
 prog --foo
 prog --bar

NOT PART OF SECTION"""
$ prog --foo
{"--foo": true}

$ prog --bar
{"--bar": true}

r"""Usage:
 prog --foo
 prog --bar
NOT PART OF SECTION"""
$ prog --foo
{"--foo": true}

$ prog --bar
{"--bar": true}


#
# Options-section syntax
#

r"""Usage: prog [options]

global options: --foo
local options: --baz
               --bar
other options:
 --egg
 --spam
-not-an-option-

"""
$ prog --baz --egg
{"--bar": false,
 "--baz": true,
 "--egg": true,
 "--foo": false,
 "--spam": false}

#
# README example usage
#

r"""
Naval Fate.

Usage:
  naval_fate ship new <name>...
  naval_fate ship <name> move <x> <y> --speed=<kn>
  naval_fate ship shoot <x> <y>
  naval_fate mine (set|remove) <x> <y> [--moored|--drifting]
  naval_fate -h | --help
  naval_fate --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --speed=<kn>  Speed in knots [default: 10].
  --moored      Moored (anchored) mine.
  --drifting    Drifting mine.
"""

$ prog ship new foo bar baz
{"<name>": ["foo", "bar", "baz"],
 "NAME": ["foo", "bar", "baz"],
 "new": true,
 "ship": true}

$ prog ship foo move 10 10 --speed
"user-error"

#
# Passing arguments to options
#

r"""Usage: prog --foo"""

$ prog --foo=bar
"user-error"

r"""Usage: prog -f"""

$ prog -f=bar
"user-error"

#
# Allow complex argument names <...>
#

r"""
Usage: prog --foo
Options: -f, --foo
"""

$ prog -f=bar
"user-error"

$ prog --foo=bar
"user-error"

r"""
Usage: prog [-p] [-d]
   or: prog syncdb [-p] [-d]

common options:
    -p, --port=<n>
        [default: 5000]

    -d, --database=<protocol[://[user[:password]@]host[:port][/database]]>
        [default: memory]
"""

$ prog syncdb
{"syncdb": true, "-p": 5000, "--port": 5000,
 "--database": "memory", "-d": "memory"}

#
# Type inference
#

r"""
Usage: prog [options]

Options: -f=<n>  [default: foo , bar qux, "foo bar", 400, true,
                           false, 10.0, 10., 0x10 TRUE, FALSE, True False,
                           -100, -10.0
                           "True" "True False 10"]
"""

$ prog
{ "-f": ["foo", "bar", "qux", "foo bar", 400, true, false, 10.0, 10.0, 0,
         true, false, true, false,
         -100, -10.0,
         "True", "True False 10"] }

#
# Valid program names
#

r"""
Usage: prog.js [options]
"""

$ prog
{}

r"""
Usage: create_ec2.py --profile=PROFILE --name=INSTANCE_NAME --instance-type=INSTANCE_TYPE
        --key-name=KEY_NAME
        --ami=AMI_NAME --subnet=SUBNET_NAME
        --iam-instance-profile=IAM_INSTANCE_PROFILE
        [--security-group=SECURITY_GROUP]...
        [--elb=ELB_NAME]...
        [(--tag-name=STRING --tag-value=VALUE)]...
NOT PART OF SECTION

Options:
    -P PROFILE --profile=PROFILE                            profile in which to operate
    -n NAME --name=NAME                                     element name
    -T KEY --tag-name=KEY                                   tag name
    -V VALUE--tag-value=VALUE                               tag value
    -e ELB_NAME --elb=ELB_NAME                              name of ELB to register an instance with
    -a AMI_NAME --ami=AMI_NAME                              name of AMI to install an instance with
    -t TYPE --instance-type=TYPE                            instance type to create instance with
    -k KEY_NAME --key-name=KEY_NAME                         name of key that grants access to instance
    -s SUBNET_NAME --subnet=SUBNET_NAME                      subnet name to create instance in
    -S SG_NAME --security-group=SG_NAME                     security group to set to the instance
    -p PROFILE_NAME --iam-instance-profile=PROFILE_NAME     IAM instance profile to start instance with
Not at 
"""

$ prog -ssubnet-0 -asome-ami -ksome-key --instance-type=t2.micro --name=foo -Psome-profile --iam-instance-profile=some-iam-instance-profile
{"-P": "some-profile",
 "--profile": "some-profile",
 "-a": "some-ami",
 "--ami": "some-ami",
 "--iam-instance-profile": "some-iam-instance-profile",
 "--instance-type": "t2.micro",
 "-k": "some-key",
 "--key-name": "some-key",
 "--name": "foo",
 "-s": "subnet-0",
 "--subnet": "subnet-0"}

#
# "options-first" enabled
#

r"""
Usage: create_ec2.py -0 ARG ARG...
NOT PART OF SECTION

Options:
    -0, --foo ARG  Do something [default: 100]
"""

$ partial foo -0 bar
{"-0": 100, "--foo": 100,
 "ARG": ["foo", "-0", "bar"], "<arg>": ["foo", "-0", "bar"]}

r"""
Usage: create_ec2.py -0 ARG [ARG]...

Options:
    -0, --foo ARG  Do something [default: 100]
"""

$ partial foo -0 bar
{"-0": 100, "--foo": 100,
 "ARG": ["foo", "-0", "bar"], "<arg>": ["foo", "-0", "bar"]}

r"""
Usage: create_ec2.py -0 ARG [ARG...]

Options:
    -0, --foo ARG  Do something [default: 100]
"""

$ partial foo -0 bar
{"-0": 100, "--foo": 100,
 "ARG": ["foo", "-0", "bar"], "<arg>": ["foo", "-0", "bar"]}

r"""
Usage: create_ec2.py -0 ARG [ARG...]...

Options:
    -0, --foo ARG  Do something [default: 100]
"""

$ partial foo -0 bar
{"-0": 100, "--foo": 100,
 "ARG": ["foo", "-0", "bar"], "<arg>": ["foo", "-0", "bar"]}

$ partial foo -0 bar
{"-0": 100, "--foo": 100,
 "ARG": ["foo", "-0", "bar"], "<arg>": ["foo", "-0", "bar"]}

r"""
Usage: create_ec2.py [ARG...]...

"""

$ partial foo bar
{"ARG": ["foo", "bar"], "<arg>": ["foo", "bar"]}

#
# "options-first" with [options]
#

r"""
Usage: create_ec2.py ARG... [options]

Options:
    -0  This is a zero
"""

# XXX: this returns superflous "-0" in the output:
$ partial foo bar -0
{"-0": false, "ARG": ["foo", "bar", "-0"], "<arg>": ["foo", "bar", "-0"]}

# XXX: this returns superflous "-0" in the output:
$ partial -0
{"-0": false, "ARG": ["-0"], "<arg>": ["-0"]}

r"""
Usage: create_ec2.py [ARG...] [options]

Options:
    -0  This is a zero
"""

# XXX: this returns superflous "-0" in the output:
$ partial foo bar -0
{"-0": false, "ARG": ["foo", "bar", "-0"], "<arg>": ["foo", "bar", "-0"]}

# XXX: this returns superflous "-0" in the output:
$ partial -0
{"-0": false, "ARG": ["-0"], "<arg>": ["-0"]}


r"""
Usage: create_ec2.py ARG... [options]

Options:
    -0  This is a zero
    -1  This is a one
"""

$ prog -0
"user-error"

# XXX: this returns superflous "-0" and "-1" in the output:
$ partial -01
{"-0": false, "-1": false, "ARG": ["-01"], "<arg>": ["-01"]}

#
# Optional arguments
#

r"""
Usage: manage.py --foo[=BAR]
"""

$ prog
{}

$ prog --foo
{"--foo": true}

$ prog --foo bar
{"--foo": "bar"}

$ prog --foo --foo
"user-error"

r"""
Usage: manage.py --foo[=BAR]...
"""

$ prog
{}

$ prog --foo
{"--foo": [true]}

$ prog --foo bar
{"--foo": ["bar"]}

$ prog --foo --foo
{"--foo": [true, true]}

r"""
Usage: manage.py --foo --foo[=BAR]
"""

$ prog
{}

$ prog --foo
{"--foo": [true]}

$ prog --foo bar
"user-error" # "bar" will be considered trailing since the first appearance
             # of '--foo' does not take an argument. XXX: Is this intutive
             # enough?

$ prog --foo --foo=bar
{"--foo": [true, "bar"]}

$ prog --foo --foobar
{"--foo": [true, "bar"]}

$ prog --foo --foo bar
{"--foo": [true, "bar"]}

$ prog --foo --foo
{"--foo": [true, true]}

r"""
Usage: manage.py --foo --foo[=BAR]...
"""

$ prog
{}

$ prog --foo
{"--foo": [true]}

$ prog --foo bar
"user-error" # "bar" will be considered trailing since the first appearance
             # of '--foo' does not take an argument. XXX: Is this intutive
             # enough?

$ prog --foo --foo
{"--foo": [true, true]}

r"""
Usage: manage.py --foo (--foo[=BAR]...)
"""

$ prog
{}

$ prog --foo
{"--foo": [true]}

$ prog --foo bar
"user-error" # "bar" will be considered trailing since the first appearance
             # of '--foo' does not take an argument. XXX: Is this intutive
             # enough?

$ prog --foo --foo
{"--foo": [true, true]}

r"""
Usage: manage.py [-f...]... [--foo[=BAR]...]...

Options:
    -f --foo  Blah
"""

$ prog
{}

$ prog --foo
{"--foo": [true], "-f": [true]}

$ prog --foo bar
"user-error" # "bar" will be considered trailing since the first appearance
             # of '--foo' does not take an argument. XXX: Is this intutive
             # enough?

$ prog --foo --foo
{"--foo": [true, true], "-f": [true, true]}

#
# Options should be parsed in any order
#

r"""usage: prog [-a] -b"""

$ prog -a -b
{"-a": true, "-b": true}

$ prog -b -a
{"-a": true, "-b": true}

r"""usage: prog -a [-b]"""

$ prog -a -b
{"-a": true, "-b": true}

$ prog -b -a
{"-a": true, "-b": true}

r"""usage: prog -a [-b] -c"""

$ prog -a -b -c
{"-a": true, "-b": true, "-c": true}

$ prog -a -c -b
{"-a": true, "-b": true, "-c": true}

$ prog -b -a -c
{"-a": true, "-b": true, "-c": true}

$ prog -b -c -a
{"-a": true, "-b": true, "-c": true}

$ prog -c -b -a
{"-a": true, "-b": true, "-c": true}

$ prog -c -a -b
{"-a": true, "-b": true, "-c": true}

r"""usage: prog -a [-b -d] -c"""

$ prog -a -b -c
{"-a": true, "-b": true, "-c": true, "-d": false}

$ prog -a -c -b
{"-a": true, "-b": true, "-c": true, "-d": false}

$ prog -b -a -c
{"-a": true, "-b": true, "-c": true, "-d": false}

$ prog -b -c -a
{"-a": true, "-b": true, "-c": true, "-d": false}

$ prog -c -b -a
{"-a": true, "-b": true, "-c": true, "-d": false}

$ prog -c -a -b
{"-a": true, "-b": true, "-c": true, "-d": false}

$ prog -d -a -b -c
{"-a": true, "-b": true, "-c": true, "-d": true}

$ prog -a -d -c -b
{"-a": true, "-b": true, "-c": true, "-d": true}

$ prog -b -a -d -c
{"-a": true, "-b": true, "-c": true, "-d": true}

$ prog -b -c -a -d
{"-a": true, "-b": true, "-c": true, "-d": true}


r"""usage: prog [(-a -b)]"""

$ prog -a -b
{"-a": true, "-b": true}

$ prog -b -a
{"-a": true, "-b": true}

$ prog -ab
{"-a": true, "-b": true}

$ prog -ba
{"-a": true, "-b": true}

$ prog -a
{"-a": true, "-b": false}

$ prog -b
{"-a": false, "-b": true}

$ prog
{"-a": false, "-b": false}

r"""usage: prog [(-a[=BAR] -b)]"""

$ prog -a FOO -b
{"-a": "FOO", "-b": true}

$ prog -b -a FOO
{"-a": "FOO", "-b": true}

$ prog -ab
{"-a": "b", "-b": false}

$ prog -ba
{"-a": true, "-b": true}

$ prog -a
{"-a": true, "-b": false}

$ prog -b
{"-b": true}

$ prog
{"-b": false}
